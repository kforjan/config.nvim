local ls = require 'luasnip'
local s = ls.snippet
local t = ls.text_node
local i = ls.insert_node

ls.add_snippets('all', {
  s('statelessW', {
    t 'class ',
    i(1, 'name'),
    t ' extends StatelessWidget {',
    t { '', '  const ' },
    i(1, 'name'),
    t '({super.key});',
    t { '', '  @override', '  Widget build(BuildContext context) {' },
    t { '', '    return Container();', '  }', '}' },
  }),

  s('statefulW', {
    t 'class ',
    i(1, 'name'),
    t ' extends StatefulWidget {',
    t { '', '  const ' },
    i(1, 'name'),
    t '({super.key});',
    t { '', '  @override', '  State<' },
    i(1, 'index'),
    t '> createState() => _',
    i(1, 'WidgetName'),
    t 'State();',
    t { '', '}', '', 'class _' },
    i(1, 'index'),
    t 'State extends State<',
    i(1, 'index'),
    t '> {',
    t { '', '  @override', '  Widget build(BuildContext context) {' },
    t { '', '    return Container();', '  }', '}' },
  }),

  s('build', {
    t '@override',
    t { '', 'Widget build(BuildContext context) {' },
    t { '  return ' },
    i(0),
    t ';',
    t { '', '}' },
  }),

  s('customPainter', {
    t 'class ',
    i(0, 'name'),
    t 'Painter extends CustomPainter {',
    t { '', '', '  @override', '  void paint(Canvas canvas, Size size) {', '  }', '', '  @override', '  bool shouldRepaint(' },
    i(0, 'name'),
    t 'Painter oldDelegate) => false;',
    t { '', '', '  @override', '  bool shouldRebuildSemantics(' },
    i(0, 'name'),
    t 'Painter oldDelegate) => false;',
    t { '', '}' },
  }),

  s('customClipper', {
    t 'class ',
    i(0, 'name'),
    t 'Clipper extends CustomClipper<Path> {',
    t { '', '', '  @override', '  Path getClip(Size size) {', '  }', '', '  @override', '  bool shouldReclip(CustomClipper<Path> oldClipper) => false;', '}' },
  }),

  s('initS', {
    t '@override',
    t { '', 'void initState() {', '  super.initState();', '  ' },
    i(0),
    t { '', '}' },
  }),

  s('dis', {
    t '@override',
    t { '', 'void dispose() {', '  ' },
    i(0),
    t { '', '  super.dispose();', '}' },
  }),

  s('reassemble', {
    t '@override',
    t { '', 'void reassemble() {', '  super.reassemble();', '  ' },
    i(0),
    t { '', '}' },
  }),

  s('didChangeD', {
    t '@override',
    t { '', 'void didChangeDependencies() {', '  super.didChangeDependencies();', '  ' },
    i(0),
    t { '', '}' },
  }),

  s('didUpdateW', {
    t '@override',
    t { '', 'void didUpdateWidget (' },
    i(1, 'Type'),
    t ' ',
    i(2, 'oldWidget'),
    t ') {',
    t { '', '  super.didUpdateWidget(' },
    i(2, 'oldWidget'),
    t ');',
    t { '', '  ' },
    i(0),
    t { '', '}' },
  }),

  s('listViewB', {
    t 'ListView.builder(',
    t { '', '  itemCount: ' },
    i(1, '1'),
    t ',',
    t { '', '  itemBuilder: (BuildContext context, int index) {', '    return ' },
    i(2),
    t ';',
    t { '', '  },', '),' },
  }),

  s('listViewS', {
    t 'ListView.separated(',
    t { '', '  itemCount: ' },
    i(1, '1'),
    t ',',
    t { '', '  separatorBuilder: (BuildContext context, int index) {', '    return ' },
    i(2),
    t ';',
    t { '', '  },', '  itemBuilder: (BuildContext context, int index) {', '    return ' },
    i(3),
    t ';',
    t { '', '  },', '),' },
  }),

  s('gridViewB', {
    t 'GridView.builder(',
    t { '', '  gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(', '    crossAxisCount: ' },
    i(1, '2'),
    t ',',
    t { '', '  ),', '  itemCount: ' },
    i(2, '2'),
    t ',',
    t { '', '  itemBuilder: (BuildContext context, int index) {', '    return ' },
    i(3),
    t ';',
    t { '', '  },', '),' },
  }),

  s('gridViewC', {
    t 'GridView.count(',
    t { '', '  crossAxisSpacing: ' },
    i(1, '1'),
    t ',',
    t { '', '  mainAxisSpacing: ' },
    i(2, '2'),
    t ',',
    t { '', '  crossAxisCount: ' },
    i(3, '2'),
    t ',',
    t { '', '  children: <Widget> [', '    ' },
    i(4),
    t { '', '  ],', '),' },
  }),

  s('gridViewE', {
    t 'GridView.extent(',
    t { '', '  maxCrossAxisExtent:  ' },
    i(1, '2'),
    t ',',
    t { '', '  children: <Widget> [', '    ' },
    i(2),
    t { '', '  ],', '),' },
  }),

  s('customScrollV', {
    t 'CustomScrollView(',
    t { '', '  slivers: <Widget>[' },
    i(0),
    t { '', '  ],', '),' },
  }),

  s('streamBldr', {
    t 'StreamBuilder(',
    t { '', '  stream: ' },
    i(1, 'stream'),
    t ',',
    t { '', '  initialData: ' },
    i(2, 'initialData'),
    t ',',
    t { '', '  builder: (BuildContext context, AsyncSnapshot snapshot) {', '    return Container(', '      child: ' },
    i(3, 'child'),
    t ';',
    t { '', '    );', '  },', '),' },
  }),

  s('animatedBldr', {
    t 'AnimatedBuilder(',
    t { '', '  animation: ' },
    i(1, 'animation'),
    t ',',
    t { '', '  child: ' },
    i(2, 'child'),
    t ',',
    t { '', '  builder: (BuildContext context, Widget? child) {', '    return ' },
    i(3),
    t ';',
    t { '', '  },', '),' },
  }),

  s('statefulBldr', {
    t 'StatefulBuilder(',
    t { '', '  builder: (BuildContext context, setState) {', '    return ' },
    i(0),
    t { '', '  },', '),' },
  }),

  s('orientationBldr', {
    t 'OrientationBuilder(',
    t { '', '  builder: (BuildContext context, Orientation orientation) {', '    return Container(', '      child: ' },
    i(3, 'child'),
    t ';',
    t { '', '    );', '  },', '),' },
  }),

  s('layoutBldr', {
    t 'LayoutBuilder(',
    t { '', '  builder: (BuildContext context, BoxConstraints constraints) {', '    return ' },
    i(0),
    t { '', '  },', '),' },
  }),

  s('singleChildSV', {
    t 'SingleChildScrollView(',
    t { '', '  controller: ' },
    i(1, 'controller'),
    t ',',
    t { '', '  child: Column(' },
    i(0),
    t { '', '  ),', '),' },
  }),

  s('futureBldr', {
    t 'FutureBuilder(',
    t { '', '  future: ' },
    i(1, 'Future'),
    t ',',
    t { '', '  initialData: ' },
    i(2, 'InitialData'),
    t ',',
    t { '', '  builder: (BuildContext context, AsyncSnapshot snapshot) {', '    return ' },
    i(3),
    t ';',
    t { '', '  },', '),' },
  }),

  s('nosm', {
    t '@override',
    t { '', 'dynamic noSuchMethod(Invocation invocation) {', '  ' },
    i(1),
    t { '', '}' },
  }),

  s('inheritedW', {
    t 'class ',
    i(1, 'Name'),
    t ' extends InheritedWidget {',
    t { '', '  const ' },
    i(1, 'Name'),
    t '({super.key, required this.child}) : super(child: child);',
    t { '', '', '  final Widget child;', '', '  static ' },
    i(1, 'Name'),
    t '? of(BuildContext context) {',
    t { '', '    return context.dependOnInheritedWidgetOfExactType<' },
    i(1, 'Name'),
    t '>();',
    t { '', '  }', '', '  @override', '  bool updateShouldNotify(' },
    i(1, 'Name'),
    t ' oldWidget) {',
    t { '', '    return ' },
    i(2, 'true'),
    t ';',
    t { '', '  }', '}' },
  }),

  s('mounted', {
    t '@override',
    t { '', 'bool get mounted {' },
    i(0),
    t { '', '}' },
  }),

  s('snk', {
    t 'Sink<',
    i(1, 'type'),
    t '> get ',
    i(2, 'name'),
    t ' => _',
    i(2, 'name'),
    t 'Controller.sink;',
    t { '', 'final _' },
    i(2, 'name'),
    t 'Controller = StreamController<',
    i(1, 'type'),
    t '>();',
  }),

  s('strm', {
    t 'Stream<',
    i(1, 'type'),
    t '> get ',
    i(2, 'name'),
    t ' => _',
    i(2, 'name'),
    t 'Controller.stream;',
    t { '', 'final _' },
    i(2, 'name'),
    t 'Controller = StreamController<',
    i(1, 'type'),
    t '>();',
  }),

  s('subj', {
    t 'Stream<',
    i(1, 'type'),
    t '> get ',
    i(2, 'name'),
    t ' => _',
    i(2, 'name'),
    t 'Subject.stream;',
    t { '', 'final _' },
    i(2, 'name'),
    t 'Subject = BehaviorSubject<',
    i(1, 'type'),
    t '>();',
  }),

  s('toStr', {
    t '@override',
    t { '', 'String toString() => ' },
    i(1, 'toString'),
    t ';',
  }),

  s('debugP', {
    t 'debugPrint(',
    i(1, 'statement'),
    t ');',
  }),

  s('importM', {
    t "import 'package:flutter/material.dart';",
  }),

  s('importC', {
    t "import 'package:flutter/cupertino.dart';",
  }),

  s('importFT', {
    t "import 'package:flutter_test/flutter_test.dart';",
  }),

  s('importAL', {
    t "import 'package:flutter_gen/gen_l10n/app_localizations.dart';",
  }),

  s('mateapp', {
    t "import 'package:flutter/material.dart';",
    t {
      '',
      '',
      'void main() => runApp(const MyApp());',
      '',
      'class MyApp extends StatelessWidget {',
      '  const MyApp({super.key});',
      '',
      '  @override',
      '  Widget build(BuildContext context) {',
    },
    t {
      '',
      '    return MaterialApp(',
      "      title: 'Material App',",
      '      home: Scaffold(',
      '        appBar: AppBar(',
      "          title: const Text('Material App Bar'),",
      '        ),',
      '        body: const Center(',
      "          child: Text('Hello World'),",
      '        ),',
      '      ),',
      '    );',
      '  }',
      '}',
    },
  }),

  s('cupeapp', {
    t "import 'package:flutter/cupertino.dart';",
    t {
      '',
      '',
      'void main() => runApp(const MyApp());',
      '',
      'class MyApp extends StatelessWidget {',
      '  const MyApp({super.key});',
      '',
      '  @override',
      '  Widget build(BuildContext context) {',
    },
    t {
      '',
      '    return const CupertinoApp(',
      "      title: 'Cupertino App',",
      '      home: CupertinoPageScaffold(',
      '        navigationBar: CupertinoNavigationBar(',
      "          middle: Text('Cupertino App Bar'),",
      '        ),',
      '        child: Center(',
      "          child: Text('Hello World'),",
      '        ),',
      '      ),',
      '    );',
      '  }',
      '}',
    },
  }),

  s('tweenAnimationBuilder', {
    t 'TweenAnimationBuilder(',
    t { '', '  duration: ' },
    i(1, 'const Duration(),'),
    t ',',
    t { '', '  tween: ' },
    i(2, 'Tween(),'),
    t ',',
    t { '', '  builder: (BuildContext context, ' },
    i(3, 'dynamic'),
    t ' value, Widget? child) {',
    t { '', '    return ' },
    i(4, 'Container();'),
    t ';',
    t { '', '  },', '),' },
  }),

  s('valueListenableBuilder', {
    t 'ValueListenableBuilder(',
    t { '', '  valueListenable: ' },
    i(1, 'null'),
    t ',',
    t { '', '  builder: (BuildContext context, ' },
    i(2, 'dynamic'),
    t ' value, Widget? child) {',
    t { '', '    return ' },
    i(3, 'Container();'),
    t ';',
    t { '', '  },', '),' },
  }),

  s('f-test', {
    t 'test(',
    t { '', '  "' },
    i(1, 'test description'),
    t '",',
    t { '', '  () {},' },
    t { '', ');' },
  }),

  s('f-group', {
    t 'group(',
    t { '', '  "' },
    i(1, 'group description'),
    t '",',
    t { '', '  () {},' },
    t { '', ');' },
  }),

  s('f-testWidgets', {
    t 'testWidgets(',
    t { '', '  "' },
    i(1, 'test description'),
    t '",',
    t { '', '  (WidgetTester tester) async {},' },
    t { '', ');' },
  }),
})
